#!/bin/bash

install() {
  # prepare vars
  local name="$DESKTOP_CORE_NAME"

  log::info "[$(timestamp)][desktop][$name] preparing ..."

  # get system os/arch
  local os="$DESKTOP_OS"
  local arch="$DESKTOP_OS_ARCH"
  local kernel="$DESKTOP_OS_KERNEL"
  local platform="$DESKTOP_OS_PLATFORM"
  # usr_bin_dir
  local usr_bin_dir="$DESKTOP_USER_BIN_DIR"
  local tmp_dir="$DESKTOP_TMP_DIR"

  # #
  # case $platform in
  # darwin)
  #   platform="osx"
  #   ;;
  # linux) ;;

  # *)
  #   log::error "[$(timestamp)] unsupport platform: $platform"
  #   return 1
  #   ;;
  # esac

  # case $arch in
  # arm64) ;;

  # amd64)
  #   arch="x86_64"
  #   ;;
  # *)
  #   log::error "[$(timestamp)] unsupport arch: $arch"
  #   return 1
  #   ;;
  # esac
  # #

  # template os
  # case $os in
  # macos)
  #   pm install -y {{.DESKTOP_NAME}}1
  #   ;;
  # ubuntu)
  #   pm install -y {{.DESKTOP_NAME}}2
  #   ;;
  # centos)
  #   pm install -y {{.DESKTOP_NAME}}3
  #   ;;
  # alpine)
  #   pm install -y {{.DESKTOP_NAME}}4
  #   ;;
  # archlinux)
  #   pm install -y {{.DESKTOP_NAME}}5
  #   ;;
  # archlinux)
  #   pm install -y {{.DESKTOP_NAME}}5
  #   ;;
  # fedora)
  #   pm install -y {{.DESKTOP_NAME}}6
  #   ;;
  # *)
  #   log::error "[$(timestamp)] unsupport os: $os ($(uname -m))"
  #   return 1
  # esac

  # files
  local tmp_file="$name.tar.gz"
  local source_bin_file="./${name}-${DESKTOP_CORE_VERSION#v}-${platform}-${arch}/$name"
  # local target_bin_file="$usr_bin_dir/$name"

  # prepare context
  cd $tmp_dir

  # reference: https://github.com/9seconds/{{.DESKTOP_NAME}}/releases
  # example:
  #   https://github.com/9seconds/{{.DESKTOP_NAME}}/releases/download/v2.1.7/{{.DESKTOP_NAME}}-2.1.7-darwin-arm64.tar.gz
  #   https://github.com/9seconds/{{.DESKTOP_NAME}}/releases/download/v2.1.7/{{.DESKTOP_NAME}}-2.1.7-darwin-amd64.tar.gz
  # generate url
  local url="${DESKTOP_CORE_RELEASE_DOWNLOAD}/$DESKTOP_CORE_VERSION/${name}-${DESKTOP_CORE_VERSION#v}-${platform}-${arch}.tar.gz"
  log::debug "[$(timestamp)][desktop][$name][$kernel][$arch] url: $url, file: ${tmp_file}, tmp_dir: $tmp_dir"

  # download
  log::info "[$(timestamp)][desktop][$name] downloading ..."
  os::download $tmp_file $url

  # extract
  log::info "[$(timestamp)][desktop][$name] extracting ..."
  os::extract $tmp_file

  # install
  log::info "[$(timestamp)][desktop][$name] installing ..."
  os::install $source_bin_file $usr_bin_dir $name

  # Complex like maven-mvnd
  #   # make executable
  #   log::info "[$(timestamp)][desktop][$name] making executable ..."
  #   chmod 755 $source_bin_file

  #   # install
  #   if [ -d "$usr_lib_dir/${name}" ]; then
  #     log::info "[$(timestamp)][desktop][$name] removing old lib ..."
  #     sudo rm -rf $usr_lib_dir/${name}
  #   fi
  #   log::info "[$(timestamp)][desktop][$name] installing lib ..."
  #   sudo mv $lib_dir $usr_lib_dir/${name}

  #   # install
  #   log::info "[$(timestamp)][desktop][$name] installing bin ..."
  #   sudo ln -sf $usr_lib_dir/${name}/bin/${DESKTOP_CORE_BIN_NAME} $usr_bin_dir/${DESKTOP_CORE_BIN_NAME}

  #   # profile
  #   log::success "[$(timestamp)][desktop][$name] config MVND_HOME=$usr_lib_dir/${name} to global env file ..."
  #   local envs=$(
  #     cat <<-END
  # export MVND_HOME=$usr_lib_dir/${name}
  # END
  # )
  #   config::profile "# ZMICRO DESKTOP MAVEN-MVND" "$envs"

  # clean
  log::info "[$(timestamp)][desktop][$name] cleaning ..."
  rm -rf $tmp_dir
}

export -f install
